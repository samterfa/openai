% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{create_chat_completion}
\alias{create_chat_completion}
\title{Create Chat Completion}
\usage{
create_chat_completion(
  messages,
  model,
  frequency_penalty = NULL,
  function_call = NULL,
  functions = NULL,
  logit_bias = NULL,
  max_tokens = NULL,
  n = NULL,
  presence_penalty = NULL,
  response_format = NULL,
  seed = NULL,
  stop = NULL,
  stream = NULL,
  temperature = NULL,
  tool_choice = NULL,
  tools = NULL,
  top_p = NULL,
  user = NULL,
  return_response = F
)
}
\arguments{
\item{messages}{(array) A list of messages comprising the conversation so far. Example Python code. Required}

\item{model}{(string) ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API. Required}

\item{frequency_penalty}{(number or null) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. See more information about frequency and presence penalties.}

\item{function_call}{(string or object) Deprecated in favor of tool_choice. Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"name": "my_function"} forces the model to call that function. none is the default when no functions are present. `auto`` is the default if functions are present.}

\item{functions}{(array) Deprecated in favor of tools. A list of functions the model may generate JSON inputs for.}

\item{logit_bias}{(map) Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.}

\item{max_tokens}{(integer or null) The maximum number of tokens to generate in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length. Example Python code for counting tokens.}

\item{n}{(integer or null) How many chat completion choices to generate for each input message.}

\item{presence_penalty}{(number or null) Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. See more information about frequency and presence penalties.}

\item{response_format}{(object) An object specifying the format that the model must output. Setting to { type: "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON. Important: when using JSON mode you must still instruct the model to produce JSON yourself via some conversation message, for example via your system message. If you don't do this, the model may generate an unending stream of whitespace until the generation reaches the token limit, which may take a lot of time and give the appearance of a "stuck" request. Also note that the message content may be partial (i.e. cut off) if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.}

\item{seed}{(integer or null) This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.}

\item{stop}{(string / array / null) Up to 4 sequences where the API will stop generating further tokens.}

\item{stream}{(boolean or null) If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: \link{DONE} message. Example Python code.}

\item{temperature}{(number or null) What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.}

\item{tool_choice}{(string or object) Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"type: "function", "function": {"name": "my_function"}} forces the model to call that function. none is the default when no functions are present. auto is the default if functions are present.}

\item{tools}{(array) A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.}

\item{top_p}{(number or null) An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10\% probability mass are considered. We generally recommend altering this or temperature but not both.}

\item{user}{(string) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.}

\item{return_response}{(boolean) Whether to return the API response or parse the contents of the response. Defaults to FALSE (parse the response).}
}
\description{
Creates a model response for the given chat conversation.
}
\seealso{
\href{https://platform.openai.com/docs/api-reference/chat/create}{Open AI Documentation}
}
